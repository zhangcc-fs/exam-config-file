spring:
  data:
    mongodb:
      uri: mongodb://localhost:27017/gateway
  cloud:
    loadbalancer:
      retry:
        enabled: true
    gateway:
      discovery:
        locator:
          lowerCaseServiceId: true
          enabled: true
      routes:
        - id: classify
          uri: lb://common-classify
        - id: client
          uri: lb://client
          predicates:
            - Path=/test/**
          filters:
            - StripPrefix=1
            - name: Hystrix
              args:
                name: default
                fallbackUri: 'forward:/defaultfallback'
            - name: RequestRateLimiter
              args:
                # 使用SpEL名称引用Bean，与上面新建的RateLimiterConf     ig类中的bean的name相同
                key-resolver: '#{@remoteAddrKeyResolver}'
                # 每秒最大访问次数
                redis-rate-limiter.replenishRate: 20
                # 令牌桶最大容量
                redis-rate-limiter.burstCapacity: 20
            - Auth=true
            - name: Retry
              args:
                retries: 1
                series:
                  - SERVER_ERROR
                methods:
                  - GET
                exceptions:
                  - java.io.IOException
ribbon:
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule
  ReadTimeout: 1000
  ConnectTimeout: 1000
  MaxAutoRetries: 0 #同一台实例最大重试次数,不包括首次调用
  MaxAutoRetriesNextServer: 3 #重试负载均衡其他的实例最大重试次数,不包括首次调用
  OkToRetryOnAllOperations: true  #是否所有操作都重试
  # hystrix 信号量隔离，3秒后自动超时
hystrix:
  command:
    default:  #default全局有效，service id指定应用有效
      execution:
        timeout:
          #如果enabled设置为false，则请求超时交给ribbon控制,为true,则超时作为熔断根据
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 9000 #断路器超时时间，默认1000ms
  shareSecurityContext: true


